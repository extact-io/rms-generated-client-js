/**
 * レンタル予約システムの公開API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GenericErrorInfo from '../dto/GenericErrorInfo';
import LoginDto from '../dto/LoginDto';
import UserAccountResourceDto from '../dto/UserAccountResourceDto';
import ValidationErrorInfo from '../dto/ValidationErrorInfo';

/**
* Authenticate service.
* @module api/AuthenticateApi
* @version 1.0.0
*/
export default class AuthenticateApi {

    /**
    * Constructs a new AuthenticateApi. 
    * @alias module:api/AuthenticateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * ユーザ認証を行う
     * ログイン名とパスワードに一致するユーザを取得する
     * @param {Object} opts Optional parameters
     * @param {module:dto/LoginDto} opts.loginDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:dto/UserAccountResourceDto} and HTTP response
     */
    authenticateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['loginDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserAccountResourceDto;
      return this.apiClient.callApi(
        '/rms/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * ユーザ認証を行う
     * ログイン名とパスワードに一致するユーザを取得する
     * @param {Object} opts Optional parameters
     * @param {module:dto/LoginDto} opts.loginDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:dto/UserAccountResourceDto}
     */
    authenticate(opts) {
      return this.authenticateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ユーザ認証を行う（curlのテスト用）
     * ログイン名とパスワードに一致するユーザを取得する
     * @param {String} loginId ログインId
     * @param {String} password パスワード
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:dto/UserAccountResourceDto} and HTTP response
     */
    authenticateForTestWithHttpInfo(loginId, password) {
      let postBody = null;
      // verify the required parameter 'loginId' is set
      if (loginId === undefined || loginId === null) {
        throw new Error("Missing the required parameter 'loginId' when calling authenticateForTest");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling authenticateForTest");
      }

      let pathParams = {
      };
      let queryParams = {
        'loginId': loginId,
        'password': password
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserAccountResourceDto;
      return this.apiClient.callApi(
        '/rms/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * ユーザ認証を行う（curlのテスト用）
     * ログイン名とパスワードに一致するユーザを取得する
     * @param {String} loginId ログインId
     * @param {String} password パスワード
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:dto/UserAccountResourceDto}
     */
    authenticateForTest(loginId, password) {
      return this.authenticateForTestWithHttpInfo(loginId, password)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
