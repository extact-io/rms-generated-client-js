/**
 * レンタル予約システムの公開API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddRentalItemDto from '../dto/AddRentalItemDto';
import AddUserAccountDto from '../dto/AddUserAccountDto';
import GenericErrorInfo from '../dto/GenericErrorInfo';
import RentalItemResourceDto from '../dto/RentalItemResourceDto';
import ReservationResourceDto from '../dto/ReservationResourceDto';
import UserAccountResourceDto from '../dto/UserAccountResourceDto';
import ValidationErrorInfo from '../dto/ValidationErrorInfo';

/**
* Admin service.
* @module api/AdminApi
* @version 1.0.0-SNAPSHOT
*/
export default class AdminApi {

    /**
    * Constructs a new AdminApi. 
    * @alias module:api/AdminApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * レンタル品を登録する
     * シリアル番号が既に使われている場合は409を返す
     * @param {Object} opts Optional parameters
     * @param {module:dto/AddRentalItemDto} opts.addRentalItemDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:dto/RentalItemResourceDto} and HTTP response
     */
    addRentalItemWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['addRentalItemDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RmsJwtAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RentalItemResourceDto;
      return this.apiClient.callApi(
        '/rms/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * レンタル品を登録する
     * シリアル番号が既に使われている場合は409を返す
     * @param {Object} opts Optional parameters
     * @param {module:dto/AddRentalItemDto} opts.addRentalItemDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:dto/RentalItemResourceDto}
     */
    addRentalItem(opts) {
      return this.addRentalItemWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ユーザを登録する
     * ログインIDが既に使われている場合は409を返す
     * @param {Object} opts Optional parameters
     * @param {module:dto/AddUserAccountDto} opts.addUserAccountDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:dto/UserAccountResourceDto} and HTTP response
     */
    addUserAccountWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['addUserAccountDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RmsJwtAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserAccountResourceDto;
      return this.apiClient.callApi(
        '/rms/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * ユーザを登録する
     * ログインIDが既に使われている場合は409を返す
     * @param {Object} opts Optional parameters
     * @param {module:dto/AddUserAccountDto} opts.addUserAccountDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:dto/UserAccountResourceDto}
     */
    addUserAccount(opts) {
      return this.addUserAccountWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * レンタル品を削除する
     * 削除対象のレンタル品を参照する予約が存在する場合は削除は行わずエラーにする
     * @param {Number} rentalItemId レンタル品ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteRentalItemWithHttpInfo(rentalItemId) {
      let postBody = null;
      // verify the required parameter 'rentalItemId' is set
      if (rentalItemId === undefined || rentalItemId === null) {
        throw new Error("Missing the required parameter 'rentalItemId' when calling deleteRentalItem");
      }

      let pathParams = {
        'rentalItemId': rentalItemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RmsJwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rms/items/{rentalItemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * レンタル品を削除する
     * 削除対象のレンタル品を参照する予約が存在する場合は削除は行わずエラーにする
     * @param {Number} rentalItemId レンタル品ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteRentalItem(rentalItemId) {
      return this.deleteRentalItemWithHttpInfo(rentalItemId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 予約を削除する
     * 予約を削除する
     * @param {Number} reservationId 予約ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteReservationWithHttpInfo(reservationId) {
      let postBody = null;
      // verify the required parameter 'reservationId' is set
      if (reservationId === undefined || reservationId === null) {
        throw new Error("Missing the required parameter 'reservationId' when calling deleteReservation");
      }

      let pathParams = {
        'reservationId': reservationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RmsJwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rms/reservations/{reservationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 予約を削除する
     * 予約を削除する
     * @param {Number} reservationId 予約ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteReservation(reservationId) {
      return this.deleteReservationWithHttpInfo(reservationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ユーザを削除する
     * 削除対象のユーザを参照する予約が存在する場合は削除は行わずエラーにする
     * @param {Number} userAccountId ユーザID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteUserAccountWithHttpInfo(userAccountId) {
      let postBody = null;
      // verify the required parameter 'userAccountId' is set
      if (userAccountId === undefined || userAccountId === null) {
        throw new Error("Missing the required parameter 'userAccountId' when calling deleteUserAccount");
      }

      let pathParams = {
        'userAccountId': userAccountId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RmsJwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/rms/users/{userAccountId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * ユーザを削除する
     * 削除対象のユーザを参照する予約が存在する場合は削除は行わずエラーにする
     * @param {Number} userAccountId ユーザID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteUserAccount(userAccountId) {
      return this.deleteUserAccountWithHttpInfo(userAccountId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * レンタル品の全件を取得する
     * 登録されているすべてのレンタル品を取得する
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:dto/RentalItemResourceDto>} and HTTP response
     */
    getAllRentalItemsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RmsJwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [RentalItemResourceDto];
      return this.apiClient.callApi(
        '/rms/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * レンタル品の全件を取得する
     * 登録されているすべてのレンタル品を取得する
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:dto/RentalItemResourceDto>}
     */
    getAllRentalItems() {
      return this.getAllRentalItemsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 予約の全件を取得する
     * 登録されているすべての予約を取得する
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:dto/ReservationResourceDto>} and HTTP response
     */
    getAllReservationsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RmsJwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ReservationResourceDto];
      return this.apiClient.callApi(
        '/rms/reservations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 予約の全件を取得する
     * 登録されているすべての予約を取得する
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:dto/ReservationResourceDto>}
     */
    getAllReservations() {
      return this.getAllReservationsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ユーザの全件を取得する
     * 登録されているすべてのユーザを取得する
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:dto/UserAccountResourceDto>} and HTTP response
     */
    getAllUserAccountsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RmsJwtAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserAccountResourceDto];
      return this.apiClient.callApi(
        '/rms/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * ユーザの全件を取得する
     * 登録されているすべてのユーザを取得する
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:dto/UserAccountResourceDto>}
     */
    getAllUserAccounts() {
      return this.getAllUserAccountsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * レンタル品を更新する
     * 依頼されたレンタル品を更新する
     * @param {Object} opts Optional parameters
     * @param {module:dto/RentalItemResourceDto} opts.rentalItemResourceDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:dto/RentalItemResourceDto} and HTTP response
     */
    updateRentalItemWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['rentalItemResourceDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RmsJwtAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RentalItemResourceDto;
      return this.apiClient.callApi(
        '/rms/items', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * レンタル品を更新する
     * 依頼されたレンタル品を更新する
     * @param {Object} opts Optional parameters
     * @param {module:dto/RentalItemResourceDto} opts.rentalItemResourceDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:dto/RentalItemResourceDto}
     */
    updateRentalItem(opts) {
      return this.updateRentalItemWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 予約を更新する
     * 依頼された予約を更新する。ユーザアカウントとレンタル品のエンティティは更新時に使用していないためIDのみ設定すればよい
     * @param {Object} opts Optional parameters
     * @param {module:dto/ReservationResourceDto} opts.reservationResourceDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:dto/ReservationResourceDto} and HTTP response
     */
    updateReservationWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['reservationResourceDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RmsJwtAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReservationResourceDto;
      return this.apiClient.callApi(
        '/rms/reservations', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 予約を更新する
     * 依頼された予約を更新する。ユーザアカウントとレンタル品のエンティティは更新時に使用していないためIDのみ設定すればよい
     * @param {Object} opts Optional parameters
     * @param {module:dto/ReservationResourceDto} opts.reservationResourceDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:dto/ReservationResourceDto}
     */
    updateReservation(opts) {
      return this.updateReservationWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ユーザを更新する
     * 依頼されたユーザを更新する
     * @param {Object} opts Optional parameters
     * @param {module:dto/UserAccountResourceDto} opts.userAccountResourceDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:dto/UserAccountResourceDto} and HTTP response
     */
    updateUserAccountWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['userAccountResourceDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['RmsJwtAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserAccountResourceDto;
      return this.apiClient.callApi(
        '/rms/users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * ユーザを更新する
     * 依頼されたユーザを更新する
     * @param {Object} opts Optional parameters
     * @param {module:dto/UserAccountResourceDto} opts.userAccountResourceDto 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:dto/UserAccountResourceDto}
     */
    updateUserAccount(opts) {
      return this.updateUserAccountWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
